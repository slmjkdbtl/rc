#!/usr/bin/osascript -l JavaScript

// Helpers
function envVar(varName) {
  return $.NSProcessInfo
    .processInfo
    .environment
    .objectForKey(varName).js
}

function matchCurrencies(searchWord, currencies) {
  const matchingCurrencies = Object.keys(currencies).map(currencyCode => {
    if (currencyCode.toLowerCase().startsWith(searchWord)) return [currencyCode, currencies[currencyCode]]

    const naiveCoinPlural = currencies[currencyCode].coin.toLowerCase() + "s"
    if (naiveCoinPlural.startsWith(searchWord)) return [currencyCode, currencies[currencyCode]]
  })

  return Object.fromEntries(matchingCurrencies.filter(currency => currency))
}

function fetchRates(ratesURL, ratesFile) {
  const fileManager = $.NSFileManager.defaultManager

  // If cache is recent, return early
  const cacheModDate = fileManager
    .attributesOfItemAtPathError(ratesFile, undefined)
    .js?.["NSFileModificationDate"]
    .js.getTime() || 0

  const cacheWait = 43200000 // 12 hours in milliseconds
  const cacheRecent = new Date().getTime() - cacheModDate < cacheWait

  if (cacheRecent) {
    const cacheContents = $.NSString.stringWithContentsOfFileEncodingError(ratesFile, $.NSUTF8StringEncoding, undefined).js
    return JSON.parse(cacheContents)
  }

  // When cache is old or does not exist, retrieve it
  const cacheDir = $(ratesFile).stringByDeletingLastPathComponent.js
  fileManager.createDirectoryAtPathWithIntermediateDirectoriesAttributesError(
    cacheDir, true, undefined, undefined)

  const queryURL = $.NSURL.URLWithString(ratesURL)
  const requestData = $.NSData.dataWithContentsOfURL(queryURL)
  const requestString = $.NSString.alloc.initWithDataEncoding(requestData, $.NSUTF8StringEncoding).js
  const currencies = JSON.parse(requestString).rates

  const currencyNames = {
    AED: "United Arab Emirates Dirham",
    AFN: "Afghan Afghani",
    ALL: "Albanian Lek",
    AMD: "Armenian Dram",
    ANG: "Netherlands Antillian Guilder",
    AOA: "Angolan Kwanza",
    ARS: "Argentine Peso",
    AUD: "Australian Dollar",
    AWG: "Aruban Florin",
    AZN: "Azerbaijani Manat",
    BAM: "Bosnia and Herzegovina Mark",
    BBD: "Barbados Dollar",
    BDT: "Bangladeshi Taka",
    BGN: "Bulgarian Lev",
    BHD: "Bahraini Dinar",
    BIF: "Burundian Franc",
    BMD: "Bermudian Dollar",
    BND: "Brunei Dollar",
    BOB: "Bolivian Boliviano",
    BRL: "Brazilian Real",
    BSD: "Bahamian Dollar",
    BTN: "Bhutanese Ngultrum",
    BWP: "Botswana Pula",
    BYN: "Belarusian Ruble",
    BZD: "Belize Dollar",
    CAD: "Canadian Dollar",
    CDF: "Congolese Franc",
    CHF: "Swiss Franc",
    CLP: "Chilean Peso",
    CNY: "Chinese Renminbi",
    COP: "Colombian Peso",
    CRC: "Costa Rican Colon",
    CUP: "Cuban Peso",
    CVE: "Cape Verdean Escudo",
    CZK: "Czech Koruna",
    DJF: "Djiboutian Franc",
    DKK: "Danish Krone",
    DOP: "Dominican Peso",
    DZD: "Algerian Dinar",
    EGP: "Egyptian Pound",
    ERN: "Eritrean Nakfa",
    ETB: "Ethiopian Birr",
    EUR: "Euro",
    FJD: "Fiji Dollar",
    FKP: "Falkland Islands Pound",
    FOK: "Faroese Króna",
    GBP: "United Kingdom Pound",
    GEL: "Georgian Lari",
    GGP: "Guernsey Pound",
    GHS: "Ghanaian Cedi",
    GIP: "Gibraltar Pound",
    GMD: "Gambian Dalasi",
    GNF: "Guinean Franc",
    GTQ: "Guatemalan Quetzal",
    GYD: "Guyanese Dollar",
    HKD: "Hong Kong Dollar",
    HNL: "Honduran Lempira",
    HRK: "Croatian Kuna",
    HTG: "Haitian Gourde",
    HUF: "Hungarian Forint",
    IDR: "Indonesian Rupiah",
    ILS: "Israeli New Shekel",
    IMP: "Manx Pound",
    INR: "Indian Rupee",
    IQD: "Iraqi Dinar",
    IRR: "Iranian Rial",
    ISK: "Icelandic Króna",
    JEP: "Jersey Pound",
    JMD: "Jamaican Dollar",
    JOD: "Jordanian Dinar",
    JPY: "Japanese Yen",
    KES: "Kenyan Shilling",
    KGS: "Kyrgyzstani Som",
    KHR: "Cambodian Riel",
    KID: "Kiribati Dollar",
    KMF: "Comorian Franc",
    KRW: "South Korean Won",
    KWD: "Kuwaiti Dinar",
    KYD: "Cayman Islands Dollar",
    KZT: "Kazakhstani Tenge",
    LAK: "Lao Kip",
    LBP: "Lebanese Pound",
    LKR: "Sri Lanka Rupee",
    LRD: "Liberian Dollar",
    LSL: "Lesotho Loti",
    LYD: "Libyan Dinar",
    MAD: "Moroccan Dirham",
    MDL: "Moldovan Leu",
    MGA: "Malagasy Ariary",
    MKD: "Macedonian Denar",
    MMK: "Burmese Kyat",
    MNT: "Mongolian Tögrög",
    MOP: "Macanese Pataca",
    MRU: "Mauritanian Ouguiya",
    MUR: "Mauritian Rupee",
    MVR: "Maldivian Rufiyaa",
    MWK: "Malawian Kwacha",
    MXN: "Mexican Peso",
    MYR: "Malaysian Ringgit",
    MZN: "Mozambican Metical",
    NAD: "Namibian Dollar",
    NGN: "Nigerian Naira",
    NIO: "Nicaraguan Córdoba",
    NOK: "Norwegian Krone",
    NPR: "Nepalese Rupee",
    NZD: "New Zealand Dollar",
    OMR: "Omani Rial",
    PAB: "Panamanian Balboa",
    PEN: "Peruvian Sol",
    PGK: "Papua New Guinean Kina",
    PHP: "Philippine Peso",
    PKR: "Pakistani Rupee",
    PLN: "Polish Złoty",
    PYG: "Paraguayan Guaraní",
    QAR: "Qatari Riyal",
    RON: "Romanian Leu",
    RSD: "Serbian Dinar",
    RUB: "Russian Ruble",
    RWF: "Rwandan Franc",
    SAR: "Saudi Riyal",
    SBD: "Solomon Islands Dollar",
    SCR: "Seychellois Rupee",
    SDG: "Sudanese Pound",
    SEK: "Swedish Krona",
    SGD: "Singapore Dollar",
    SHP: "Saint Helena Pound",
    SLE: "Sierra Leonean Leone",
    SLL: "Sierra Leonean Leone",
    SOS: "Somali Shilling",
    SRD: "Surinamese Dollar",
    SSP: "South Sudanese Pound",
    STN: "São Tomé and Príncipe Dobra",
    SYP: "Syrian Pound",
    SZL: "Eswatini Lilangeni",
    THB: "Thai Baht",
    TJS: "Tajikistani Somoni",
    TMT: "Turkmenistan Manat",
    TND: "Tunisian Dinar",
    TOP: "Tongan Paʻanga",
    TRY: "Turkish Lira",
    TTD: "Trinidad and Tobago Dollar",
    TVD: "Tuvaluan Dollar",
    TWD: "New Taiwan Dollar",
    TZS: "Tanzanian Shilling",
    UAH: "Ukrainian Hryvnia",
    UGX: "Ugandan Shilling",
    USD: "United States Dollar",
    UYU: "Uruguayan Peso",
    UZS: "Uzbekistani So'm",
    VES: "Venezuelan Bolívar Soberano",
    VND: "Vietnamese Đồng",
    VUV: "Vanuatu Vatu",
    WST: "Samoan Tālā",
    XAF: "Central African Franc",
    XCD: "East Caribbean Dollar",
    XDR: "Special Drawing Rights",
    XOF: "West African Franc",
    XPF: "CFP Franc",
    YER: "Yemeni Rial",
    ZAR: "South African Rand",
    ZMW: "Zambian Kwacha",
    ZWL: "Zimbabwean Dollar"
  }

  // Transform new object for searching
  const unorderedRatesObj = Object.keys(currencies).reduce((allCurrencies, currentCurrency) => {
    const splitName = currencyNames[currentCurrency].split(" ")

    allCurrencies[currentCurrency] = {
      rate: currencies[currentCurrency],
      country: splitName.slice(0, -1).join(" "),
      coin: splitName.slice(-1).join()
    }

    return allCurrencies
  }, currencies)

  // Bubble popular currencies to the top
  const ratesObj = Object.assign(
    { EUR: null, USD: null, GBP: null, JPY: null, CAD: null, AUD: null, CHF: null, NZD: null, HKD: null },
    unorderedRatesObj)

  $(JSON.stringify(ratesObj)).writeToFileAtomicallyEncodingError(
    ratesFile, true, $.NSUTF8StringEncoding, undefined)
  return ratesObj
}

// Main
function run(argv) {
  const ratesFile = `${envVar("alfred_workflow_cache")}/ratesUSD.json`
  const ratesURL = "https://open.er-api.com/v6/latest/USD"
  const currencies = fetchRates(ratesURL, ratesFile)

  const interpretedInput = argv[0].replace(/ (to|in|as) /i, " ").toLowerCase()
  const rawNumber = interpretedInput.replace(/^(\d*(\.\d+)?)\D*/, "$1")
  const rawOperation = interpretedInput.substring(rawNumber.length).trim()
	const splitOperation = rawOperation.split(" ")
  const numberValue = parseFloat(rawNumber)
  const originCurrency = splitOperation[0] || ""
  const targetCurrency = splitOperation[1] || ""

  // Abort if invalid number
  if (Number.isNaN(numberValue)) return JSON.stringify({ items: [{
    title: "Input a Value and a Currency",
    subtitle: "Example: 42 EUR",
    valid: false
  }]})

  // When no starting currencies specified, show them all
  if (originCurrency.length === 0) return JSON.stringify({ items: Object.keys(currencies).map(currencyCode => ({
    uid: currencyCode,
    title: `${numberValue} ${currencyCode}`,
    subtitle: `${currencies[currencyCode].country} ${currencies[currencyCode].coin}`,
     autocomplete: `${numberValue} ${currencyCode} to `,
    valid: false,
    icon: { path: `images/flags/${currencyCode}.png` }
  }))})

  // Get matches when starting currency specified
  const startCurrencies = matchCurrencies(originCurrency, currencies)
  const startMatchCount = Object.keys(startCurrencies).length

  // When no starting currencies match, ask for corrections
  if (startMatchCount === 0) return JSON.stringify({ items: [{
    title: "Input a Valid Currency",
    subtitle: "Examples: EUR, GBP, USD",
    valid: false
  }]})

  // When multiple starting currencies match, narrow with autocomplete
  if (startMatchCount > 1) return JSON.stringify({ items: Object.keys(startCurrencies).map(currencyCode => ({
    uid: currencyCode,
    title: `${numberValue} ${currencyCode}`,
    subtitle: `${currencies[currencyCode].country} ${currencies[currencyCode].coin}`,
    autocomplete: `${numberValue} ${currencyCode} to `,
    valid: false,
    icon: { path: `images/flags/${currencyCode}.png` }
  }))})

  // When only one currency matches, convert
  const startCurrencyCode = Object.keys(startCurrencies)[0]
  const endCurrencies = matchCurrencies(targetCurrency, currencies)

  return JSON.stringify({ items: Object.keys(endCurrencies).flatMap(currencyCode => {
    if (currencyCode === startCurrencyCode) return []
    const convertedValue = currencies[currencyCode].rate / startCurrencies[startCurrencyCode].rate * numberValue
    const trimmedValue = convertedValue.toFixed(2)

    return {
      uid: currencyCode,
      title: `${trimmedValue} ${currencyCode}`,
      subtitle: `${startCurrencies[startCurrencyCode].country} ${startCurrencies[startCurrencyCode].coin} → ${currencies[currencyCode].country} ${currencies[currencyCode].coin}`,
      arg: trimmedValue,
      autocomplete: `${numberValue} ${startCurrencyCode} to ${currencyCode}`,
      icon: { path: `images/flags/${currencyCode}.png` }
    }
  })})
}
