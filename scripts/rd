#!/usr/bin/env bun
// remote download client

import { $ } from "bun"
import * as fs from "fs/promises"
import { cli } from "./cli"

const HOST = "space55.xyz"
const USER = "tga"
const RPC_URL = `http://${HOST}:6800/jsonrpc`
const SSH_HOST = `${USER}@${HOST}`
const SECRET = "password"

async function call(method, params = [], id = method) {

	if (SECRET) {
		params.unshift(`token:${SECRET}`);
	}

	const res = await fetch(RPC_URL, {
		method: "POST",
		headers: { "Content-Type": "application/json" },
		body: JSON.stringify({
			jsonrpc: "2.0",
			method,
			id,
			params,
		}),
	})

	const json = await res.json()

	if (json.error) {
		throw new Error(json.error.message)
	}

	return json.result

}

function fmtBytes(bytes, decimals = 2) {
	if (bytes === 0) return "0b";
	const k = 1024;
	const dm = decimals < 0 ? 0 : decimals
	const sizes = ["b", "kb", "mb", "gb", "tb", "pb"]
	const i = Math.floor(Math.log(bytes) / Math.log(k))
	const size = parseFloat((bytes / Math.pow(k, i)).toFixed(dm))
	return `${size}${sizes[i]}`
}

function progressbar(progress, len) {
	let str = ""
	for (let i = 0; i < len; i++) {
		const p = i / len
		str += p < progress ? "#" : "-"
	}
	return str
}

function printJob(job) {
	const totalLength = parseInt(job.totalLength || "0", 10)
	const completedLength = parseInt(job.completedLength || "0", 10)
	const downloadSpeed = parseInt(job.downloadSpeed || "0", 10)
	const uploadSpeed = parseInt(job.uploadSpeed || "0", 10)
	const progress = completedLength / totalLength
	const percent = totalLength > 0
	  ? (progress * 100).toFixed(1)
	  : "0.0"
	const b = fmtBytes
	console.log(`- [${job.status}] ${job.gid}`);
	console.log(`  ${progressbar(progress, 64)}`)
	console.log(`  ${percent}% ${b(completedLength)} / ${b(totalLength)} down: ${b(downloadSpeed)} up: ${b(uploadSpeed)} seeds: ${job.numSeeders}`);
	for (const file of job.files) {
		console.log(`  ${file.path}`)
	}
}

function printJobs(title, jobs) {
	if (!jobs.length) return
	console.log(`${title}:\n`)
	for (const job of jobs) {
		printJob(job)
		console.log("")
	}
};

async function ls() {
	const [active, waiting, stopped] = await Promise.all([
		call("aria2.tellActive"),
		call("aria2.tellWaiting", [0, 64]),
		call("aria2.tellStopped", [0, 64]),
	])
	printJobs("Active", active)
	printJobs("Waiting", waiting)
	printJobs("Stopped", stopped)
}

async function status(gid) {
	const job = await call("aria2.tellStatus", [gid])
	printJob(job)
}

async function remove(gid) {
	const res = await call("aria2.remove", [gid])
	console.log(`job removed: ${res}`)
}

async function pause(gid) {
	const res = await call("aria2.pause", [gid])
	console.log(`job paused: ${res}`)
}

async function pauseAll() {
	const res = await call("aria2.pauseAll")
	console.log("all jobs paused")
}

async function resume(gid) {
	const res = await call("aria2.unpause", [gid])
	console.log(`job resumed: ${res}`)
}

async function resumeAll() {
	const res = await call("aria2.unpauseAll")
	console.log("all jobs resumed")
}

async function purge(gid) {
	const res = await call("aria2.removeDownloadResult", [gid])
	console.log(`job purged: ${res}`)
}

async function purgeAll() {
	const res = await call("aria2.purgeDownloadResult")
	console.log("all inactive jobs purged")
}

async function addTorrent(path) {
	const buf = await Bun.file(path).arrayBuffer()
	const base64 = Buffer.from(buf).toString("base64")
	const gid = await call("aria2.addTorrent", [base64])
	console.log(`job added: ${gid}`)
}

async function addURL(url) {
	const gid = await call("aria2.addUri", [[url]])
	console.log(`job added: ${gid}`)
}

type ExecRemoteOpts = {
	interactive?: boolean,
}

async function execRemote(cmd, opts: ExecRemoteOpts = {}) {
	return await $`ssh ${opts.interactive ? "-t" : ""} ${SSH_HOST} '${cmd}'`
}

async function pull(gid) {
	const job = await call("aria2.tellStatus", [gid])
	const zipPath = `${job.dir}/${gid}.zip`
	const zipCmd = `zip -r "${zipPath}" ${job.files.map((f) => `"${f.path}"`).join(" ")}`
	await execRemote(zipCmd)
	await $`rsync --progress -avh ${SSH_HOST}:"${zipPath}" .`
}

async function delet(gid) {
	const job = await call("aria2.tellStatus", [gid])
	const zipPath = `${job.dir}/${gid}.zip`
	const rmCmd = `rm "${zipPath}" ${job.files.map((f) => `"${f.path}"`).join(" ")}`
	await execRemote(rmCmd)
}

async function isFile(path) {
	try {
		const stat = await fs.stat(path)
		return stat.isFile()
	} catch {
		return false
	}
}

const cmds = []

cmds.push({
	name: "add",
	desc: "add new file / torrent download job",
	args: [
		{ name: "url|torrent", desc: "url or torrent file to download" },
	],
	action: async ([src]) => {
		if (await isFile(src)) {
			await addTorrent(src)
		} else {
			await addURL(src)
		}
	},
})

cmds.push({
	name: "ls",
	desc: "list all jobs",
	action: async () => {
		await ls()
	},
})

cmds.push({
	name: "status",
	desc: "check status of a job",
	args: [
		{ name: "id", desc: "GID of the download job" },
	],
	action: async ([gid]) => {
		await status(gid)
	},
})

cmds.push({
	name: "pause",
	desc: "pause job",
	args: [
		{ name: "id", desc: "GID of the download job", required: false }
	],
	action: async ([gid]) => {
		if (gid) {
			await pause(gid)
		} else {
			await pauseAll()
		}
	},
})

cmds.push({
	name: "resume",
	desc: "resume job",
	args: [
		{ name: "id", desc: "GID of the download job", required: false }
	],
	action: async ([gid]) => {
		if (gid) {
			await resume(gid)
		} else {
			await resumeAll()
		}
	},
})

cmds.push({
	name: "rm",
	desc: "remove job",
	args: [
		{ name: "id", desc: "GID of the download job" },
	],
	action: async ([gid]) => {
		await remove(gid)
	},
})

cmds.push({
	name: "purge",
	desc: "clean finished jobs",
	args: [
		{ name: "id", desc: "GID of the download job", required: false },
	],
	action: async ([gid]) => {
		if (gid) {
			await purge(gid)
		} else {
			await purgeAll()
		}
	},
})

cmds.push({
	name: "pull",
	desc: "pull downloaded files",
	args: [
		{ name: "id", desc: "GID of the download job" },
	],
	action: async ([gid]) => {
		await pull(gid)
	},
})

cmds.push({
	name: "delete",
	desc: "delete downloaded files",
	args: [
		{ name: "id", desc: "GID of the download job" },
	],
	action: async ([gid]) => {
		await delet(gid)
	},
})

cmds.push({
	name: "daemon-status",
	desc: "check status of the aria2 daemon",
	action: async () => {
		await execRemote(`sudo systemctl status aria2`, { interactive: true })
	},
})

try {
	await cli({
		desc: "Remote download client",
		cmds: cmds,
	})
} catch (e) {
	console.error(e.message)
}
