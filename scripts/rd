#!/usr/bin/env bun

import * as fs from "fs/promises"

const HOST = "space55.xyz"
const USER = "tga"
const RPC_URL = `http://${HOST}:6800/jsonrpc`
const SSH_HOST = `${USER}@${HOST}`
const SECRET = "password"

async function call(method, params = [], id = method) {

	if (SECRET) {
		params.unshift(`token:${SECRET}`);
	}

	const res = await fetch(RPC_URL, {
		method: "POST",
		headers: { "Content-Type": "application/json" },
		body: JSON.stringify({
			jsonrpc: "2.0",
			method,
			id,
			params,
		}),
	})

	const json = await res.json()

	if (json.error) {
		throw new Error(json.error.message)
	}

	return json.result

}

function fmtBytes(bytes, decimals = 2) {
	if (bytes === 0) return "0b";
	const k = 1024;
	const dm = decimals < 0 ? 0 : decimals
	const sizes = ["b", "kb", "mb", "gb", "tb", "pb"]
	const i = Math.floor(Math.log(bytes) / Math.log(k))
	const size = parseFloat((bytes / Math.pow(k, i)).toFixed(dm))
	return `${size}${sizes[i]}`
}

function progressbar(progress, len) {
	let str = ""
	for (let i = 0; i < len; i++) {
		const p = i / len
		str += p < progress ? "#" : "-"
	}
	return str
}

function printJob(job) {
	const totalLength = parseInt(job.totalLength || "0", 10)
	const completedLength = parseInt(job.completedLength || "0", 10)
	const downloadSpeed = parseInt(job.downloadSpeed || "0", 10)
	const uploadSpeed = parseInt(job.uploadSpeed || "0", 10)
	const progress = completedLength / totalLength
	const percent = totalLength > 0
	  ? (progress * 100).toFixed(1)
	  : "0.0"
	const b = fmtBytes
	console.log(`- [${job.status}] ${job.gid}`);
	console.log(`  ${progressbar(progress, 64)}`)
	console.log(`  ${percent}% ${b(completedLength)} / ${b(totalLength)} down: ${b(downloadSpeed)} up: ${b(uploadSpeed)} seeds: ${job.numSeeders}`);
	for (const file of job.files) {
		console.log(`  ${file.path}`)
	}
}

function printJobs(title, jobs) {
	if (!jobs.length) return
	console.log(`${title}:\n`)
	for (const job of jobs) {
		printJob(job)
		console.log("")
	}
};

async function ls() {
	const [active, waiting, stopped] = await Promise.all([
		call("aria2.tellActive"),
		call("aria2.tellWaiting", [0, 64]),
		call("aria2.tellStopped", [0, 64]),
	])
	printJobs("Active", active)
	printJobs("Waiting", waiting)
	printJobs("Stopped", stopped)
}

async function status(gid) {
	const job = await call("aria2.tellStatus", [gid])
	printJob(job)
}

async function remove(gid) {
	const res = await call("aria2.remove", [gid])
	console.log(`job removed: ${res}`)
}

async function pause(gid) {
	const res = await call("aria2.pause", [gid])
	console.log(`job paused: ${res}`)
}

async function pauseAll() {
	const res = await call("aria2.pauseAll")
	console.log("all jobs paused")
}

async function resume(gid) {
	const res = await call("aria2.unpause", [gid])
	console.log(`job resumed: ${res}`)
}

async function resumeAll() {
	const res = await call("aria2.unpauseAll")
	console.log("all jobs resumed")
}

async function purge(gid) {
	const res = await call("aria2.removeDownloadResult", [gid])
	console.log(`job purged: ${res}`)
}

async function purgeAll() {
	const res = await call("aria2.purgeDownloadResult")
	console.log("all inactive jobs purged")
}

async function addTorrent(path) {
	const base64 = await fs.readFile(path, "base64")
	const gid = await call("aria2.addTorrent", [base64])
	console.log(`job added: ${gid}`)
}

async function addURL(url) {
	const gid = await call("aria2.addUri", [url])
	console.log(`job added: ${gid}`)
}

async function exec(cmds) {
	return await Bun.spawn(cmds, {
		stdout: "inherit",
		stderr: "inherit",
		stdin: "inherit",
	})
}

async function pull(gid) {
	const job = await call("aria2.tellStatus", [gid])
	const zipPath = `${job.dir}/${gid}.zip`
	const zipCmd = `zip -r "${zipPath}" ${job.files.map((f) => `"${f.path}"`).join(" ")}`
	await exec(["ssh", "-t", SSH_HOST, zipCmd])
	await exec(["rsync", "--progress", "-avh", `${SSH_HOST}:"${zipPath}"`, "."])
}

async function delet(gid) {
	const job = await call("aria2.tellStatus", [gid])
	const zipPath = `${job.dir}/${gid}.zip`
	const rmCmd = `rm "${zipPath}" ${job.files.map((f) => `"${f.path}"`).join(" ")}`
	await exec(["ssh", "-t", SSH_HOST, rmCmd])
}

function help() {
	console.log(`
Remote download client

USAGE
  $ rd <cmd> [args]

COMMANDS
  add <file|url>   add new file / torrent download job
  ls               list all jobs
  rm    <gid>      remove job
  pause <gid>      pause job
  purge            clean finished jobs
  pull             pull downloaded files
  delete           delete downloaded files
	`.trim())
}

async function run() {

	const cmd = process.argv[2]

	switch (cmd) {
		case "add": {
			const thing = process.argv[3]
			if (!thing) {
				throw new Error("please specify url or torrent file")
			}
			await addTorrent(thing)
			break
		}
		case "ls": {
			await ls()
			break
		}
		case "status": {
			const gid = process.argv[3]
			if (!gid) {
				throw new Error("please specify job gid")
			}
			await status(gid)
			break
		}
		case "pause": {
			const gid = process.argv[3]
			if (gid) {
				await pause(gid)
			} else {
				await pauseAll()
			}
			break
		}
		case "resume": {
			const gid = process.argv[3]
			if (gid) {
				await resume(gid)
			} else {
				await resumeAll()
			}
			break
		}
		case "purge": {
			const gid = process.argv[3]
			if (gid) {
				await purge(gid)
			} else {
				await purgeAll()
			}
			break
		}
		case "rm": {
			const gid = process.argv[3]
			if (!gid) {
				throw new Error("please specify job gid")
			}
			await remove(gid)
			break
		}
		case "pull": {
			const gid = process.argv[3]
			if (!gid) {
				throw new Error("please specify job gid")
			}
			await pull(gid)
			break
		}
		case "delete": {
			const gid = process.argv[3]
			if (!gid) {
				throw new Error("please specify job gid")
			}
			await delet(gid)
			break
		}
		default: {
			help()
		}
	}

}

try {
	await run()
} catch (e) {
	console.error(e.message)
}
