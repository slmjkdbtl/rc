#!/usr/bin/env bun
// query Yu-Gi-Oh! card data

import { $ } from "bun"
import * as os from "os"
import * as fs from "fs/promises"
import * as path from "path"
import { cli } from "./cli"

const DIR = path.join(os.homedir(), "files/yugioh")
const IMG_DIR = path.join(DIR, "img")
const DATA_FILE = path.join(DIR, "data.json")
const API_URL = "https://db.ygoprodeck.com/api/v7/cardinfo.php"

async function updateDB() {
	const res = await fetch(API_URL)
	await fs.mkdir(DIR, { recursive: true })
	await Bun.write(DATA_FILE, res)
}

async function isFile(path) {
	try {
		const stat = await fs.stat(path)
		return stat.isFile()
	} catch {
		return false
	}
}

async function getCards() {
	if (!await isFile(DATA_FILE)) {
		await updateDB()
	}
	const data = await Bun.file(DATA_FILE).json()
	return data.data
}

function toIDMap(cards) {
	const map = {}
	for (const card of cards) {
		map[card.id] = card
	}
	return map
}

function toNameMap(cards) {
	const map = {}
	for (const card of cards) {
		map[card.name] = card
	}
	return map
}

async function getCard(id: string) {
	const cards = await getCards()
	const map = Number(id).toString() === id ? toIDMap(cards) : toNameMap(cards)
	return map[id]
}

const cmds = []

cmds.push({
	name: "update",
	desc: "Update local DB and card images",
	// TODO: remove unused images
	action: async () => {
		await updateDB()
		await fs.mkdir(IMG_DIR, { recursive: true })
		const cards = await getCards()
		const cardFiles = await fs.readdir(IMG_DIR)
		const existing = new Set(
			cardFiles.map((img) => path.basename(img, path.extname(img)))
		)
		for (const card of cards) {
			if (existing.has(card.id + "")) continue
			console.log(`${card.name} (${card.id})`)
			const file = path.join(IMG_DIR, `${card.id}.png`)
			const res = await fetch(card.card_images[0].image_url)
			await Bun.write(file, res)
		}
	},
})

cmds.push({
	name: "search",
	desc: "Search a card",
	args: [
		{ name: "query", desc: "Search query" },
	],
	action: async ([query]) => {
		const cards = await getCards()
		const results = cards.filter((card) => {
			const target = card.name + card.desc
			return target.toLowerCase().includes(query.toLowerCase())
		})
		for (const card of results) {
			console.log(`${card.name} (${card.id})`)
		}
	},
})

cmds.push({
	name: "view",
	desc: "View card image",
	args: [
		{ name: "id", desc: "Card ID" },
	],
	action: async ([id]) => {
		const card = await getCard(id)
		if (!card) return
		await $`open ${path.join(IMG_DIR, `${card.id}.png`)}`
	},
})

cmds.push({
	name: "info",
	desc: "View card info",
	args: [
		{ name: "id", desc: "Card ID" },
	],
	action: async ([id]) => {
		const card = await getCard(id)
		if (!card) return
		console.log(card.name)
		console.log(card.humanReadableCardType)
		console.log(card.desc)
	},
})

try {
	await cli({
		desc: "Query Yu-Gi-Oh! card data",
		cmds: cmds,
	})
} catch (e) {
	console.error(e.message)
}
