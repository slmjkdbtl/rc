redirect stderr to stdout

  $ cmd 2>&1

redirect stderr to a file

  $ cmd 2> err.txt

redirect both stdout and stderr to a file

  $ cmd > out.txt 2>&1

don't output stderr

  $ cmd 2>/dev/null

ffmpeg basics

  $ ffmpeg -i input.mov output.mp4
  $ ffmpeg -i input.mov -c copy output.mp4
  $ ffmpeg -i input.mov -c:v copy -c:a copy output.mp4
  $ ffmpeg -i input.mov -c:v libx264 -c:a aac output.mp4

ffmpeg resize video

  $ ffmpeg -i input.mp4 -vf scale=640:480 -c:a copy output.mp4
  $ ffmpeg -i input.mp4 -vf scale=-1:720 -c:a copy output.mp4
  $ ffmpeg -i input.mp4 -vf scale=-2:720 -c:a copy output.mp4

ffmpeg crop video

  $ ffmpeg -i input.mp4 -vf crop=480:640:0:0 -c:a copy output.mp4

ffmpeg trim video

  $ ffmpeg -i input.mp4 -ss 00:00:00.000 -t 00:05:00.000 -c copy output.mp4

ffmpeg change video framerate

  $ ffmpeg -i input.mp4 -vf fps=30 output.mp4

ffmpeg change video speed

  $ ffmpeg -i input.mp4 -vf setpts=0.5*PTS -af atempo=2 output.mp4

ffmpeg reverse video

  $ ffmpeg -i input.mp4 -vf reverse -af areverse output.mp4

ffmpeg make h264 video playable on apple devices

  $ ffmpeg -i input.mp4 -pix_fmt yuv420p output.mp4

ffmpeg embed soft subtitle

  $ ffmpeg -i input.mp4 -i sub.srt -c copy -c:s mov_text -metadata:s:s:0 language=eng output.mp4
  $ ffmpeg -i input.mp4 -i eng.srt -i chi.srt -map 0 -map 1 -map 2 -c copy -c:s mov_text -metadata:s:s:0 language=eng -metadata:s:s:1 language=chi output.mp4
  $ ffmpeg -i input_eng.mp4 -i chi.srt -map 0 -map 1 -c copy -c:s mov_text -metadata:s:s:1 language=chi output_eng_chi.mp4

ffmpeg extract subtitle from video

  $ ffmpeg -i input.mp4 -map 0:s:0 sub.srt
  $ ffmpeg -i input.mp4 -map 0:s:1 sub2.srt

ffmpeg strip video / audio / subtitle from video

  $ ffmpeg -i input.mp4 -vn output.mp3
  $ ffmpeg -i input.mp4 -c:v copy -an output.mp4
  $ ffmpeg -i input.mp4 -c copy -sn output.mp4

ffmpeg resize image

  $ ffmpeg -i input.jpg -vf scale=640:480 output.jpg
  $ ffmpeg -i input.jpg -vf scale=640:480:flags=neighbor -q:v 2 output.jpg

ffmpeg audio bitrate

  $ ffmpeg -i input.flac -b:a 256k output.mp3

ffmpeg add audio to video

  $ ffmpeg -i input.mp4 -i input.mp3 -c copy -map 0:v:0 -map 1:a:0 output.mp4

ffmpeg only keep audio and video

  $ ffmpeg -i input.mp4 -map 0:v -map 0:a -c copy output.mp4

ffmpeg remove all subtitle, data and attachments

  $ ffmpeg -i input.mp4 -map 0 -map -0:s -map -0:d -map -0:t -c copy output.mp4

ffmpeg remove the second audio track

  $ ffmpeg -i input.mp4 -map 0 -map -0:a:1 -c copy output.mp4

ffmpeg keep first video track, second audio track and all subtitles

  $ -map 0:v:0 -map 0:a:1 -map 0:s

ffmpeg add audio to image generate video

  $ ffmpeg -loop 1 -i input.jpg -i input.mp3 -c:v libx264 -c:a aac -b:a 256k -preset veryslow -tune stillimage -vf scale=600:600 -shortest -strict experimental -shortest "$out"

ffmpeg concat video

  $ ffmpeg -i 1.mp4 -i 2.mp4 -i 3.mp4 -filter_complex "[0:v] [0:a] [1:v] [1:a] [2:v] [2:a] concat=n=3:v=1:a=1 [v] [a]" -map "[v]" -map "[a]" out.mp4

ffmpeg image conversion

  $ ffmpeg -i img.png img.webp
  $ ffmpeg -i img.png -q:v 80 img.webp

ffmpeg set id3tag

  $ ffmpeg -i input.mp3
      \ -metadata title="The Will Come, Is Now"
      \ -metadata album="The Will Come, Is Now"
      \ -metadata artist="Ronnie Boykins"
      \ -metadata date="1975"
      \ -metadata track="1"
      \ -metadata disc=""
      \ -metadata TRACKTOTAL=""
      \ -metadata album_artist=""
      \ -metadata comment=""
      \ -metadata genre=""
      \ -metadata grouping=""
      \ -metadata composer=""
      \ -metadata producer=""
      \ -metadata copyright=""
      \ -metadata publisher=""
      \ -metadata encoder=""
      \ output.mp3

ffprobe get video / image dimension

  $ ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=p=0:s=x "test.png"
  $ ffprobe -v error -select_streams v:0 -show_entries stream=height -of csv=p=0:s=x "test.mp4"

curl use header

  $ curl -H "Authorization: Bearer c35c1bea-eb03-2e10-ec33-acb230b6cb85" https://api.example.com

curl print header

  $ curl -i http://example.com

curl POST request with data

  $ curl -X POST -d '{"key1":"value1", "key2":"value2"}' -H "Content-Type: application/json" http://example.com
  $ curl -X POST -d "@data.json" http://example.com
  $ curl -X POST -d "param1=value1&param2=value2" http://example.com

curl follow redirect

  $ curl -L http://example.com

curl don't print progress and error

  $ curl -s http://example.com

curl send data as multipart/form-data

  $ curl -F "file=@$test.png" https://0x0.st

flush dns cache

  $ sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder

set names

  $ sudo scutil --set HostName tga-macbook
  $ sudo scutil --set LocalHostName tga-macbook
  $ sudo scutil --set ComputerName tga-macbook

disable gatekeeper

  $ sudo spctl --master-disable

clean ds store

  $ find . -name '.DS_Store' -print -delete

get local ip

  $ ipconfig getifaddr en0

list files by size

  $ du -chs * .* | sort -h

notify

  $ osascript -e 'display notification "msg" with title "title"'

edit crontab

  $ crontab -e

generate ssh key

  $ ssh-keygen -t rsa

ssh auto login

  $ ssh-add

get character encoding

  $ file -I file.txt

convert character encoding

  $ iconv -f ISO-8859-1 -t UTF-8 src.txt > dest.txt

run TempleOS with qemu

  $ qemu-img create -f qcow2 temple 2G
  $ qemu-system-x86_64 \
      -m 512M \
      -drive file=temple \
      -cdrom TempleOS.ISO \
      -boot order=d

watch star wars

  $ telnet towel.blinkenlights.nl

rename all files to number

  $ rename -X -e '$_ = "$N"' *
  $ rename -N ...03 -X -e '$_ = "File-$N"' *

remove white background from image

  $ ffmpeg -i input.png -vf colorkey=white:0.05:0.0 output.png
  $ magick input.png -transparent white output.png
  $ magick input.png -fuzz 5% -transparent white output.png

loop over number

  $ for i in $(seq 1 10); do
      echo $i
    done

make font subset from file

  $ pyftsubset font.ttf --text-file=file.txt --flavor=woff2 --output-file=font.woff2

convert epub to pdf

  $ pandoc -f epub -t pdf --pdf-engine=tectonic "book.epub" -o "book.pdf"

make unsigned binary runnable

  $ xattr -d com.apple.quarantine bin
