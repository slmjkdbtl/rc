set noexpandtab
set shiftwidth=4
set tabstop=4
set smarttab
set autoindent
set mouse=a
set backspace=2
set timeoutlen=0
set ttimeoutlen=0
set scrolloff=3
set nowrapscan
set incsearch
set nohlsearch
set signcolumn=yes
set laststatus=2
set showtabline=2
set noshowmode
set noshowcmd
set cursorline
set commentstring=
set comments=
set nofoldenable
set noswapfile
set nospell
set wrap
set showbreak=..
set breakindent
set autoread
set hidden
set clipboard=unnamed,unnamedplus
set belloff=all
set history=1000
set wildmenu
set wildmode=longest:list,full
set wildignore=*/.git/*,*/.svn/*,*/.cache/*,*/.tmp/*,*/node_modules/*,*/.tup/*
set wildignore=.git,.svn,.cache,.tmp,.tup
set wildignore+=.DS_Store
set wildignore+=.tags,*.map
set wildignore+=*.so,*.o,*.out,*.swp,*.exe,*.elf,*.hex,*.dll,*~
set list
exec 'set listchars=tab:\|\ '
filetype plugin indent on
syntax on
colorscheme dirty
let loaded_netrwPlugin = 1

" enable bar cursor on insert mode
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

" set trash dir
if has('macunix')
	let g:trashdir = expand('$HOME/.Trash')
elseif has('unix') || has('win32unix')
	if $XDG_DATA_HOME !=# ''
		let g:trashdir = expand('$XDG_DATA_HOME/Trash')
	else
		let g:trashdir = expand('$HOME/.local/share/Trash')
	endif
endif

" local plugins
call plug#init()
call proj#init()
call browse#init()
call comment#init()
call utils#init()
call bufline#init()
call statline#init()
call utils#trim_on_save()

" ext plugins
Plug 'junegunn/fzf'
Plug 'dense-analysis/ale'
Plug 'mhinz/vim-signify'

Plug 'pangloss/vim-javascript'
Plug 'tbastos/vim-lua'
Plug 'plasticboy/vim-markdown'
Plug 'rust-lang/rust.vim'
Plug 'cespare/vim-toml'
Plug 'leafgarland/typescript-vim'
Plug 'dag/vim-fish'
Plug 'LnL7/vim-nix'
Plug 'tikhomirov/vim-glsl'
Plug 'jdonaldson/vaxe'
Plug 'jparise/vim-graphql'

" signify
let g:signify_vcs_list = [ 'git' ]
let g:signify_sign_show_text = 1
let g:signify_sign_show_count = 0
let g:signify_sign_add = '+'
let g:signify_sign_delete = '-'
let g:signify_sign_delete_first_line = g:signify_sign_delete
let g:signify_sign_change = '~'
let g:signify_sign_changedelete = g:signify_sign_change

" ale
let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_save = 1
let g:ale_lint_on_enter = 1
let g:ale_lint_on_filetype_changed = 1
let g:ale_echo_msg_format = '%s'
let g:ale_sign_error = '>'
let g:ale_sign_warning = '*'
let g:ale_sign_info = '?'
let g:ale_set_highlights = 0
let g:ale_hover_cursor = 0
let g:ale_floating_preview = 1
let g:ale_linters_explicit = 1
let g:ale_floating_window_border = ['|', '-', ' ', ' ', ' ', ' ']
let g:ale_c_parse_makefile = 1

let g:ale_fixers = {
	\ 'javascript': [ 'eslint', 'prettier' ],
	\ 'typescript': [ 'eslint', 'prettier' ],
	\ 'typescriptreact': [ 'eslint', 'prettier' ],
\ }

let g:ale_linters = {
	\ 'c': [ 'clangd', ],
	\ 'cpp': [ 'clangd', ],
	\ 'rust': [ 'analyzer', ],
	\ 'go': [ 'gopls', ],
	\ 'javascript': [ 'tsserver', 'eslint', ],
	\ 'typescript': [ 'tsserver', 'eslint', ],
	\ 'typescriptreact': [ 'tsserver', 'eslint', ],
\ }

" fzf
command! FZFMru call fzf#run(fzf#wrap({
\ 'source':  v:oldfiles,
\ 'sink':    'e',
\ 'options': '-m -x +s',
\ }))

func! s:tobranch(b)
	call system('git switch ' . a:b)
	let curbuf = expand(':p')
	if filereadable(curbuf)
		silent! edit
	else
		exec 'silent! edit ' . getcwd()
	endif
endfunc

command! Branch call fzf#run(fzf#wrap({
\ 'source':  'git branch',
\ 'sink':    function('<sid>tobranch'),
\ }))

command! Diff call fzf#run(fzf#wrap({
\ 'source':  'git diff --name-status',
\ }))

func! s:torg(item)
	let chunks = split(a:item, ':')
	let file = chunks[0]
	let line = chunks[1]
	let col = chunks[2]
	exec 'edit ' . file
	call cursor(line, col)
endfunc

command! Rg call fzf#run(fzf#wrap({
\ 'source':  "rg --column --line-number --no-heading --smart-case -- " . shellescape(<q-args>),
\ 'sink':    function('<sid>torg'),
\ }))

func! s:tohist(item)
	let chunks = split(a:item)
	let commit = chunks[0]
	call utils#gshow(commit)
endfunc

command! Hist call fzf#run(fzf#wrap({
\ 'source':  'git log --oneline ' . expand('%:p'),
\ 'sink':    function('<sid>tohist'),
\ }))

let g:fzf_layout = { 'down': '60%' }

let g:fzf_colors = {
	\ 'fg':         ['fg', 'DirtyFG4'],
	\ 'bg':         ['bg', 'DirtyBG'],
	\ 'hl':         ['fg', 'Comment'],
	\ 'fg+':        ['fg', 'Normal'],
	\ 'bg+':        ['bg', 'DirtyBG'],
	\ 'hl+':        ['fg', 'DirtyFGYellow'],
	\ 'info':       ['bg', 'DirtyBG4'],
	\ 'border':     ['bg', 'DirtyBG'],
	\ 'prompt':     ['fg', 'DirtyFGBlue'],
	\ 'pointer':    ['fg', 'Comment'],
	\ 'marker':     ['fg', 'Keyword'],
	\ 'spinner':    ['fg', 'DirtyFGMagenta'],
	\ 'header':     ['bg', 'DirtyBG'],
	\ 'preview-fg': ['fg', 'DirtyFG5'],
\ }

let g:vim_markdown_fenced_languages = [
	\ 'js=javascript',
	\ 'ts=typescript',
\ ]

call keys#unmap()
call keys#esc2meta()
call keys#ctrl2meta()

" enable num keys for repeeat
for k in split('123456789', '\zs')
	exec 'no ' . k . ' ' . k
endfor

no! <cr> <cr>
no! <bs> <bs>
no! <tab> <tab>

" movement
no h h
no l l
no k gk
no j gj
no <m-h> b
no <m-l> e
no <m-j> 5gj
no <m-k> 5gk
no <left> <left>
no <right> <right>
no <up> gk
no <down> gj
no <m-left> b
no <m-right> e
no <m-up> 5gk
no <m-down> 5gj
no! <left> <left>
no! <right> <right>
no! <m-h> <c-o>b
no! <m-l> <c-o>w
no! <m-left> <c-o>b
no! <m-right> <c-o>w
cno <up> <up>
cno <down> <down>
cno <m-left> <s-left>
cno <m-right> <s-right>
no ^ gg
no $ G
ino <up> <c-x><c-y>
ino <down> <c-x><c-e>

" enter insert
nno <cr> a
vno <cr> "_s
nno > A
nno < I
vno > <esc>`>a
vno < <esc>`<i

" select
nno v V
nno <m-v> v
vno <space> <esc>
vno v <esc>
nno <space> viw

" insert line in normal mode
nno <m-cr> o<esc>
ino <m-cr> <esc>mqa<cr><esc>`qa<cr>

" save
nno w :w<cr>

" undo & redo
nno u u
nno o <c-r>

" copy, cut & paste
nno y yy
vno y may`a
nno x dd
vno x d
nno p P
vno p "_dP
ino <m-p> <c-o>P

" delete
nno d "_dd
vno d "_d
ino <m-bs> <c-w>
cno <m-bs> <c-w>

" search
" func! s:search_sel() range
" 	normal! "sy
" 	let @/ = escape(@s, '/\.*')
" 	set hls
" endfunc

nno ? :set hls<cr>/
vno <silent> ? "sy:let @/=escape(@s,'/\.*~]')<cr>:set hls<cr>
" vno <silent> ? :'<,'>call <sid>search_sel()<cr>
nno ; N
nno ' n

" record & playback
nno <silent> @{ :nm \ @}<cr>qq
nno <silent> @} q:nm \ @{<cr>
nno <silent> @v q:let @q='c?'.@q<cr>:nm \ @{<cr>
nm \ @{
nno , @q
vno <silent> <m-cr> "sy:let @/=escape(@s, '/\.*~]')<cr>:nm \ @v<cr>qqgn"_s

" change
nno c "_ci
nno c? gn"_s

" clear
func! s:clear()
	set nohls
	call popup_clear()
	echo ''
endfunc

nno <silent> <esc> :call <sid>clear()<cr>

" command mode, repeat last, jump to match
no : :
no . .
no % %
no! <cr> <cr>

" indent
vno <tab> >
vno <bs> <

" buffer nav
nno <silent> - :bp<cr>
nno <silent> = :bn<cr>
nno <silent> <m-q> :bp<cr>
nno <silent> <m-e> :bn<cr>
nno <silent> <m-w> :bw<cr>

func! s:tobuf(n)
	let bufs = getbufinfo({ 'buflisted': 1 })
	if a:n < len(bufs)
		exec 'b' . bufs[a:n].bufnr
	endif
endfunc

for k in split('123456789', '\zs')
	exec 'nno <silent> <m-' . k . '> :call <sid>tobuf(' . (str2nr(k) - 1) . ')<cr>'
endfor

" toggle settings with f keys
no <silent> <f1> :Toggle hlsearch<cr>
no <silent> <f2> :Toggle expandtab<cr>
no <silent> <f3> :Toggle wrap<cr>
no <silent> <f4> :Toggle number<cr>
no <silent> <f5> :Toggle spell<cr>

" open outside
nno <silent> <m--> :OpenWezTerm<cr>
nno <silent> <m-=> :OpenFinder<cr>

" scroll wheel to arrow
map <ScrollWheelUp> <up>
map <ScrollWheelDown> <down>
map <m-ScrollWheelUp> <m-up>
map <m-ScrollWheelDown> <m-down>
map! <ScrollWheelUp> <up>
map! <ScrollWheelDown> <down>

" jump to proj
nno z :Proj<space>

" browse
nno <silent> <tab> :BrowseToggle<cr>

" comment
no <silent> / :CommentToggle<cr>

" ale
nno <silent> <m-n> :ALEPrevious<cr>
nno <silent> <m-m> :ALENext<cr>
nno <silent> <m-b> :ALEDetail<cr>
nno <silent> <m-i> :ALEHover<cr>
nno <silent> <m-o> :ALEGoToDefinition<cr>
nno <silent> <m-p> :ALEFindReferences<cr>

" signify
nm <m-;> <plug>(signify-prev-hunk)
nm <m-'> <plug>(signify-next-hunk)

" fzf
nno <silent> <m-f> :FZF<cr>
nno <silent> <m-g> :Rg<cr>

" bind all pair keys
call pair#bind()

" file type detection
au BufRead,BufNewFile *.h        set ft=c
au BufRead,BufNewFile *.dt       set ft=dirty

" file type comments
au FileType c                setl cms=//%s
au FileType cpp              setl cms=//%s
au FileType rust             setl cms=//%s
au FileType go               setl cms=//%s
au FileType glsl             setl cms=//%s
au FileType javascript       setl cms=//%s
au FileType typescript       setl cms=//%s
au FileType typescriptreact  setl cms=//%s
au FileType sh               setl cms=#%s
au FileType toml             setl cms=#%s
au FileType make             setl cms=#%s
au FileType python           setl cms=#%s
au FileType ruby             setl cms=#%s
au FileType gitignore        setl cms=#%s
au FileType dirty            setl cms=--%s
au FileType lua              setl cms=--%s
au FileType vim              setl cms=\"%s
au FileType forth            setl cms=\\%s
au FileType html             setl cms=<!--%s-->
au FileType css              setl cms=/*%s*/
au FileType markdown         setl et ts=4 sw=4
au FileType text             setl et ts=2 sw=2
