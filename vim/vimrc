set noexpandtab
set shiftwidth=4
set tabstop=4
set smarttab
set autoindent
set mouse=a
set backspace=2
set timeoutlen=0
set ttimeoutlen=0
set scrolloff=3
set nowrapscan
set incsearch
set hlsearch
set signcolumn=yes
set laststatus=2
set showtabline=2
set noshowmode
set noshowcmd
set cursorline
set commentstring=
set comments=
set nofoldenable
set noswapfile
set nospell
set wrap
set showbreak=..
set breakindent
set autoread
set hidden
set belloff=all
set wildignore=*/.git/*,*/.svn/*,*/.cache/*,*/.tmp/*,*/node_modules/*,*/.tup/*
set wildignore=.git,.svn,.cache,.tmp,.tup
set wildignore+=.DS_Store
set wildignore+=.tags,*.map
set wildignore+=*.so,*.o,*.out,*.swp,*.exe,*.elf,*.hex,*.dll,*~
set list
exec 'set listchars=tab:\|\ '
filetype plugin indent on
syntax on
colorscheme dirty
let loaded_netrwPlugin = 1

" enable bar cursor on insert mode
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

" local plugins
call plug#init()
call proj#init()
call browse#init()
call trim#init()
call comment#init()
call toggle#init()
call utils#init()
call bufline#init()
call statline#init()

" ext plugins
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'dense-analysis/ale'
Plug 'mhinz/vim-signify'
Plug 'pangloss/vim-javascript'
Plug 'tbastos/vim-lua'
Plug 'plasticboy/vim-markdown'
Plug 'rust-lang/rust.vim'
Plug 'cespare/vim-toml'
Plug 'leafgarland/typescript-vim'
Plug 'dag/vim-fish'
Plug 'fatih/vim-go'
Plug 'LnL7/vim-nix'
Plug 'tikhomirov/vim-glsl'
Plug 'jdonaldson/vaxe'

" signify
let g:signify_vcs_list = [ 'git' ]
let g:signify_sign_show_text = 1
let g:signify_sign_show_count = 0
let g:signify_sign_add = '+'
let g:signify_sign_delete = '-'
let g:signify_sign_delete_first_line = g:signify_sign_delete
let g:signify_sign_change = '~'
let g:signify_sign_changedelete = g:signify_sign_change

" ale
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_sign_error = '>'
let g:ale_sign_warning = '*'
let g:ale_sign_info = '?'
let g:ale_set_highlights = 0
let g:ale_c_cc_executable = 'clang'
let g:ale_c_cc_options = '-std=99 -Wall'
let g:ale_c_parse_makefile = 1

let g:ale_linters = {
	\ 'typescript': [ 'tsserver' ],
	\ 'rust': [ 'analyzer' ],
\ }

" fzf
let g:fzf_layout = { 'down': '60%' }

let g:fzf_colors = {
	\ 'fg':         ['bg', 'DirtyBG5'],
	\ 'bg':         ['bg', 'DirtyBG'],
	\ 'hl':         ['fg', 'Comment'],
	\ 'fg+':        ['fg', 'Normal'],
	\ 'bg+':        ['bg', 'DirtyBG'],
	\ 'hl+':        ['fg', 'DirtyFGYellow'],
	\ 'info':       ['fg', 'DirtyHide'],
	\ 'border':     ['bg', 'DirtyBG'],
	\ 'prompt':     ['fg', 'DirtyFGBlue'],
	\ 'pointer':    ['fg', 'Comment'],
	\ 'marker':     ['fg', 'Keyword'],
	\ 'spinner':    ['fg', 'DirtyFGMagenta'],
	\ 'header':     ['bg', 'DirtyBG'],
	\ 'preview-fg': ['bg', 'DirtyBG5'],
\ }

call keys#unmap()
call keys#esc2meta()

" enable num keys for repeeat
for k in split('123456789', '\zs')
	exec 'no ' . k . ' ' . k
endfor

no! <cr> <cr>
no! <bs> <bs>
no! <tab> <tab>

" movement
no h h
no l l
no j gj
no k gk
no <m-h> b
no <m-l> e
no <m-j> 5j
no <m-k> 5k
no <left> <left>
no <right> <right>
no <up> <up>
no <down> <down>
no <m-left> b
no <m-right> e
no <m-up> 5k
no <m-down> 5j
no <s-up> 5k
no <s-down> 5j
no! <left> <left>
no! <right> <right>
no! <m-h> <c-o>b
no! <m-l> <c-o>w
no! <m-left> <c-o>b
no! <m-right> <c-o>w
cno <up> <up>
cno <down> <down>
cno <m-left> <s-left>
cno <m-right> <s-right>
no ^ gg
no $ G
ino <up> <c-x><c-y>
ino <down> <c-x><c-e>

" enter insert
nno <cr> a
vno <cr> s
nno > A
nno < I
vno > <esc>`>a
vno < <esc>`<i

" select
nno v V
nno <m-v> v
vno <space> <esc>
vno v <esc>
nno <space> viw

" insert line in normal mode
nno <m-cr> o<esc>
ino <m-cr> <esc>mqa<cr><esc>`qa<cr>

" save
nno <silent> w :silent! w<cr>

" undo & redo
nno <silent> u u
nno <silent> o <c-r>

" copy, cut & paste
nno y "*yy
vno y ma"*y`a
nno x "*dd
vno x "*d
no p "*P
ino <m-p> <c-o>"*P

" delete
nno d "_dd
vno d "_d
ino <m-bs> <c-w>
cno <m-bs> <c-w>

" search
nno ? :set hls<cr>/
vno <silent> ? ""y:let @/=escape(@",'/\')<cr>:set hls<cr>
nno <silent> ; N
nno <silent> ' n

" record & playback
nno <silent> @{ :nm \ @}<cr>qq
nno <silent> @} q:nm \ @{<cr>
nno <silent> @v q:let @q='c'.@q<cr>:nm \ @{<cr>
nm <silent> \ @{
nno <silent> , @q
vno <silent> <m-cr> ""y:let @/=escape(@", '/\')<cr>:nm \ @v<cr>qqgns
nno c gns

" clear
nno <silent> <esc> :set nohls<cr>:echo ''<cr>

" command mode, repeat last, jump to match
no : :
no . .
no % %
no! <cr> <cr>

" indent
vno <tab> >
vno <bs> <

" buffer nav
nno <silent> - :bp<cr>
nno <silent> = :bn<cr>
nno <silent> <m-q> :bp<cr>
nno <silent> <m-e> :bn<cr>
nno <silent> <m-w> :bd<cr>

" toggle settings with f keys
no <silent> <f1> :Toggle hlsearch<cr>
no <silent> <f2> :Toggle expandtab<cr>
no <silent> <f3> :Toggle wrap<cr>
no <silent> <f4> :Toggle number<cr>
no <silent> <f5> :Toggle spell<cr>

" open outside
nno <silent> <m--> :OpenIterm<cr>
nno <silent> <m-=> :OpenFinder<cr>

" scroll wheel
no <ScrollWheelUp> 5k
no <ScrollWheelDown> 5j

" jump to proj
nno z :Proj<space>

" browse
nno <silent> <tab> :BrowseToggle<cr>

" comment
no <silent> / :CommentToggle<cr>

" ale
nno <silent> <m-n> :ALEPrevious<cr>
nno <silent> <m-m> :ALENext<cr>
nno <silent> <m-b> :ALEDetail<cr>
nno <silent> <m-i> :ALEHover<cr>
nno <silent> <m-o> :ALEGoToDefinition<cr>
nno <silent> <m-p> :ALEFindReferences<cr>

" fzf
nno <silent> <m-g> :Rg<cr>
nno <silent> <m-f> :Files<cr>

" bind all pair keys
call pair#bind()

" file type detection
call ft#detect('*.h', 'c')
call ft#detect('*.dt', 'dirty')

" file type comments
call ft#comment('c', '//%s')
call ft#comment('cpp', '//%s')
call ft#comment('rust', '//%s')
call ft#comment('go', '//%s')
call ft#comment('glsl', '//%s')
call ft#comment('javascript', '//%s')
call ft#comment('typescript', '//%s')
call ft#comment('typescriptreact', '//%s')
call ft#comment('sh', '#%s')
call ft#comment('toml', '#%s')
call ft#comment('make', '#%s')
call ft#comment('python', '#%s')
call ft#comment('ruby', '#%s')
call ft#comment('gitignore', '#%s')
call ft#comment('dirty', '--%s')
call ft#comment('lua', '--%s')
call ft#comment('vim', '\"%s')
call ft#comment('forth', '\\%s')
call ft#comment('html', '<!--%s-->')
call ft#comment('css', '/*%s*/')
