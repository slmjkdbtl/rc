set noexpandtab
set shiftwidth=4
set tabstop=4
set smarttab
set autoindent
set mouse=a
set backspace=2
set timeoutlen=0
set ttimeoutlen=0
set scrolloff=3
set nowrapscan
set incsearch
set hlsearch
set signcolumn=yes
set laststatus=2
set showtabline=2
set noshowmode
set noshowcmd
set cursorline
set commentstring=
set comments=
set nofoldenable
set noswapfile
set nospell
set wrap
set showbreak=..
set breakindent
set autoread
set hidden
set belloff=all
set wildignore=*/.git/*,*/.svn/*,*/.cache/*,*/.tmp/*,*/node_modules/*,*/.tup/*
set wildignore=.git,.svn,.cache,.tmp,.tup
set wildignore+=.DS_Store
set wildignore+=.tags,*.map
set wildignore+=*.so,*.o,*.out,*.swp,*.exe,*.elf,*.hex,*.dll,*~
set list
exec 'set listchars=tab:\|\ '
filetype plugin indent on
syntax on
colorscheme dirty
let loaded_netrwPlugin = 1

" local plugins
call plug#init()
call proj#init()
call browse#init()
call trim#init()
call comment#init()
call open#init()
call bufline#init()
call statline#init()

" ext plugins
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'dense-analysis/ale'
Plug 'mhinz/vim-signify'
Plug 'pangloss/vim-javascript'
Plug 'tbastos/vim-lua'
Plug 'plasticboy/vim-markdown'
Plug 'rust-lang/rust.vim'
Plug 'cespare/vim-toml'
Plug 'leafgarland/typescript-vim'
Plug 'dag/vim-fish'

" signify
let g:signify_vcs_list = [ 'git' ]
let g:signify_sign_show_text = 1
let g:signify_sign_show_count = 0
let g:signify_sign_add = '+'
let g:signify_sign_delete = '-'
let g:signify_sign_delete_first_line = g:signify_sign_delete
let g:signify_sign_change = '~'
let g:signify_sign_changedelete = g:signify_sign_change

" ale
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_sign_error = '>'
let g:ale_sign_warning = '*'
let g:ale_sign_info = '?'
let g:ale_set_highlights = 0

let g:ale_linters = {
	\ 'typescript': [ 'tsserver' ],
	\ 'rust': [ 'analyzer' ],
\ }

" fzf
let g:fzf_layout = { 'down': '60%' }

let g:fzf_colors = {
	\ 'fg':         ['bg', 'DirtyBG5'],
	\ 'bg':         ['bg', 'DirtyBG'],
	\ 'hl':         ['fg', 'Comment'],
	\ 'fg+':        ['fg', 'Normal'],
	\ 'bg+':        ['bg', 'DirtyBG'],
	\ 'hl+':        ['fg', 'DirtyFGYellow'],
	\ 'info':       ['fg', 'DirtyHide'],
	\ 'border':     ['bg', 'DirtyBG'],
	\ 'prompt':     ['fg', 'DirtyFGBlue'],
	\ 'pointer':    ['fg', 'Comment'],
	\ 'marker':     ['fg', 'Keyword'],
	\ 'spinner':    ['fg', 'DirtyFGMagenta'],
	\ 'header':     ['bg', 'DirtyBG'],
	\ 'preview-fg': ['bg', 'DirtyBG5'],
\ }

" disable defaults
mapclear
imapclear
cmapclear
tmapclear

for k in split('qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890`-=;,./~!@#$%^&*()_+{}:)', '\zs')
	exec 'map ' . k . ' <nop>'
	exec 'map <c-' . k . '> <nop>'
	exec 'map <m-' . k . '> <nop>'
	" enable esc+ as meta
	exec "set <m-" . k . ">=\e" . k
endfor

map [ <nop>
map ] <nop>
map \ <nop>
map ' <nop>
map " <nop>
map < <nop>
map > <nop>
map ? <nop>
map <bs> <nop>
map <cr> <nop>
exec "set <m-'>=\e'"
exec "set <m-return>=\e\<cr>"
" TODO
" exec "set <m-bs>=\e\<bs>"

" movement
noremap h h
noremap j gj
noremap k gk
noremap l l
noremap <m-h> b
noremap <m-l> e
noremap <m-j> 5j
noremap <m-k> 5k
noremap ^ gg
noremap $ G
inoremap <silent> <up> <c-x><c-y>
inoremap <silent> <down> <c-x><c-e>

" enter insert
nnoremap <return> a
vnoremap <return> s
nnoremap > A
nnoremap < I
vnoremap > <esc>`>a
vnoremap < <esc>`<i

" select
nnoremap v V
nnoremap <m-v> v
vnoremap <space> <esc>
vnoremap v <esc>
nnoremap <space> viw

" insert line in normal mode
nnoremap <m-return> o<esc>
inoremap <m-return> <esc>mqa<cr><esc>`qa<cr>

" save
nnoremap <silent> w :silent! w<cr>

" undo & redo
nnoremap <silent> u u
nnoremap <silent> o <c-r>

" copy, cut & paste
nnoremap y "*yy
vnoremap y ma"*y`a
nnoremap x "*dd
vnoremap x "*d
noremap p "*P
inoremap <m-p> <c-o>"*p

" delete
nnoremap d "_dd
vnoremap d "_d
inoremap <m-bs> <c-w>
inoremap <c-bs> <c-w>
cnoremap <m-bs> <c-w>
cnoremap <c-bs> <c-w>

" search
nnoremap ? /
vnoremap <silent> ? ""y:let @/=escape(@",'/\')<cr>:set hlsearch<cr>
nnoremap <silent> ; N
nnoremap <silent> ' n

" record & playback
nnoremap <silent> @{ :nmap \ @}<cr>qq
nnoremap <silent> @} q:nmap \ @{<cr>
nnoremap <silent> @v q:let @q='c'.@q<cr>:nmap \ @{<cr>
nmap <silent> \ @{
nnoremap <silent> , @q
vnoremap <silent> <m-return> ""y:let @/=escape(@", '/\')<cr>:nmap \ @v<cr>qqgns
nnoremap c gns

" clear
nnoremap <silent> r :noh<cr>:echo ''<cr>

" command mode
nnoremap : :
" repeat last action
nnoremap . .
" jump to matching paren
noremap % %

" indent
vnoremap <tab> >
vnoremap <bs> <

" buffer nav
nnoremap <silent> - :bprev<cr>
nnoremap <silent> = :bnext<cr>
nnoremap <silent> <m-q> :bprev<cr>
nnoremap <silent> <m-e> :bnext<cr>
nnoremap <silent> <m-w> :bwipe<cr>

" open outside
nnoremap <silent> <m--> :OpenIterm<cr>
nnoremap <silent> <m-=> :OpenFinder<cr>

" jump to proj
nnoremap z :Proj<space>

" browse
nnoremap <silent> <tab> :BrowseToggle<cr>

" comment
noremap <silent> / :CommentToggle<cr>

" ale
nnoremap <silent> <m-n> :ALEPrevious<cr>
nnoremap <silent> <m-m> :ALENext<cr>
nnoremap <silent> <m-b> :ALEDetail<cr>
nnoremap <silent> <m-i> :ALEHover<cr>
nnoremap <silent> <m-o> :ALEGoToDefinition<cr>
nnoremap <silent> <m-p> :ALEFindReferences<cr>

" fzf
nnoremap <silent> <m-g> :Rg<cr>
nnoremap <silent> <m-f> :Files<cr>

" bind all pair keys
call pair#bind()

" file type detection
call ft#detect('*.h', 'c')
call ft#detect('*.dt', 'dirty')
call ft#detect('*.glsl', 'glsl')
call ft#detect('.gitignore', 'gitignore')

" file type comments
call ft#comment('c', '//%s')
call ft#comment('cpp', '//%s')
call ft#comment('rust', '//%s')
call ft#comment('go', '//%s')
call ft#comment('glsl', '//%s')
call ft#comment('javascript', '//%s')
call ft#comment('typescript', '//%s')
call ft#comment('typescriptreact', '//%s')
call ft#comment('sh', '#%s')
call ft#comment('toml', '#%s')
call ft#comment('make', '#%s')
call ft#comment('python', '#%s')
call ft#comment('ruby', '#%s')
call ft#comment('gitignore', '#%s')
call ft#comment('dirty', '--%s')
call ft#comment('lua', '--%s')
call ft#comment('vim', '\"%s')
call ft#comment('forth', '\\%s')
call ft#comment('html', '<!--%s-->')
call ft#comment('css', '/*%s*/')

