set noexpandtab
set shiftwidth=4
set tabstop=4
set smarttab
set autoindent
set mouse=a
set backspace=2
set timeoutlen=0
set ttimeoutlen=0
set scrolloff=3
set nowrapscan
set incsearch
set hlsearch
set signcolumn=yes
set laststatus=2
set showtabline=2
set noshowmode
set noshowcmd
set cursorline
set commentstring=
set comments=
set nofoldenable
set noswapfile
set nospell
set showmatch
set wrap
set showbreak=..
set breakindent
set autoread
set hidden
set wildignore=*/.git/*,*/.svn/*,*/.cache/*,*/.tmp/*,*/node_modules/*,*/.tup/*
set wildignore=.git,.svn,.cache,.tmp,.tup
set wildignore+=.DS_Store
set wildignore+=.tags,*.map
set wildignore+=*.so,*.o,*.out,*.swp,*.exe,*.elf,*.hex,*.dll,*~
set list
exec 'set listchars=tab:\|\ '
filetype indent on
syntax on
colorscheme super
let loaded_netrwPlugin = 1

call plug#init()
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'dense-analysis/ale'
Plug 'mhinz/vim-signify'
Plug 'pangloss/vim-javascript'
Plug 'tbastos/vim-lua'
Plug 'plasticboy/vim-markdown'
Plug 'rust-lang/rust.vim'
Plug 'cespare/vim-toml'
Plug 'leafgarland/typescript-vim'

call proj#init()
call browse#init()
call trim#onsave()
call autocd#init()
call bufline#set()
call statline#set()

" signify
let g:signify_vcs_list = [ 'git' ]
let g:signify_sign_show_text = 1
let g:signify_sign_show_count = 0
let g:signify_sign_add = '+'
let g:signify_sign_delete = '-'
let g:signify_sign_delete_first_line = g:signify_sign_delete
let g:signify_sign_change = '~'
let g:signify_sign_changedelete = g:signify_sign_change

" ale
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_sign_error = '>'
let g:ale_sign_warning = '*'
let g:ale_sign_info = '?'
let g:ale_set_highlights = 0
let g:ale_rust_cargo_check_examples = 1
let g:ale_rust_cargo_check_tests = 1

let g:ale_linters = {
	\ 'typescript': ['tsserver'],
\ }

" fzf
let g:fzf_layout = { 'down': '60%' }

let g:fzf_colors = {
	\ 'fg':      ['fg', 'Comment'],
	\ 'bg':      ['bg', 'SuperBG2'],
	\ 'hl':      ['fg', 'Comment'],
	\ 'fg+':     ['fg', 'Normal'],
	\ 'bg+':     ['bg', 'SuperBG2'],
	\ 'hl+':     ['fg', 'SuperFGYellow'],
	\ 'info':    ['fg', 'SuperHide2'],
	\ 'border':  ['bg', 'SuperBG3'],
	\ 'prompt':  ['fg', 'SuperFGBlue'],
	\ 'pointer': ['fg', 'Comment'],
	\ 'marker':  ['fg', 'Keyword'],
	\ 'spinner': ['fg', 'SuperFGMagenta'],
	\ 'header':  ['fg', 'SuperFGRed'],
\ }

call ft#detect('*.h', 'c')
call ft#detect('*.dt', 'dirty')

call ft#comment('c', '//%s')
call ft#comment('dirty', '--%s')
call ft#comment('vim', '\"%s')
call ft#comment('sh', '#%s')
call ft#comment('typescriptreact', '//%s')

" disable defaults
mapclear
imapclear
cmapclear
tmapclear

for k in split('qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890`-=;,./~!@#$%^&*()_+{}:)', '\zs')
	exec 'map ' . k . ' <nop>'
	exec 'map <m-' . k . '> <nop>'
	exec 'map <c-' . k . '> <nop>'
	" enable esc+ as meta
	exec "set <m-" . k . ">=\e" . k
endfor

map <bs> <nop>
map [ <nop>
map ] <nop>
map \ <nop>
map ' <nop>
map " <nop>
map < <nop>
map > <nop>
map ? <nop>
map <cr> <nop>
exec "set <m-'>=\e'"
exec "set <m-return>=\e\<cr>"
" TODO
" exec "set <m-bs>=\e\<bs>"

" save
nnoremap <silent> w :silent! w<cr>

" undo / redo
nnoremap <silent> u u
nnoremap <silent> o <c-r>

" copy / paste
nnoremap y "*yy
vnoremap y ma"*y`a
noremap p "*P

" delete cur line
nnoremap d "_dd
vnoremap d "_d

" movement
noremap h h
noremap j gj
noremap k gk
noremap l l
noremap <m-h> b
noremap <m-l> e
noremap <m-j> 5j
noremap <m-k> 5k

" cut
nnoremap x "*dd
vnoremap x "*d

" select cur line
nnoremap v V
nnoremap <m-v> v
vnoremap <space> <esc>
vnoremap v <esc>

" jump to proj
nnoremap z :Proj<space>

" move to line or selection start / end and enter insert mode
nnoremap > A
nnoremap < I
vnoremap > <esc>`>a
vnoremap < <esc>`<i

" insert line in normal mode
nnoremap <m-return> o<esc>

" go to document top / bot
noremap ^ gg
noremap $ G

" command mode
nnoremap : :

" search
nnoremap ? /

" clear
nnoremap <silent> r :noh<cr>:echo ''<cr>
" TODO
" nnoremap <silent> <esc> :noh<cr>:echo ''<cr>

" buffer nav
nnoremap <silent> - :bprev<cr>
nnoremap <silent> = :bnext<cr>
nnoremap <silent> <m-q> :bprev<cr>
nnoremap <silent> <m-e> :bnext<cr>
nnoremap <silent> <m-w> :bwipe<cr>

" repeat last action
nnoremap . .

" interact outside
nnoremap <silent> <m--> :call open#iterm()<cr>
nnoremap <silent> <m-=> :call open#finder()<cr>

" select cur word
nnoremap <space> viw

" del word in insert / command mode
inoremap <m-bs> <c-w>
cnoremap <m-bs> <c-w>

" lock verti cursor in insert mode
inoremap <silent> <up> <c-x><c-y>
inoremap <silent> <down> <c-x><c-e>

" enter insert mode
nnoremap <return> a

" delete cur selection and enter insert mode
vnoremap <return> s

" indent
vnoremap <tab> >
vnoremap <bs> <

noremap % %

" browse
nnoremap <silent> <tab> :BrowseToggle<cr>

" ale
nnoremap <silent> <m-n> :ALEPrevious<cr>
nnoremap <silent> <m-m> :ALENext<cr>
nnoremap <silent> <m-b> :ALEDetail<cr>
nnoremap <silent> <m-i> :ALEHover<cr>
nnoremap <silent> <m-o> :ALEGoToDefinition<cr>
nnoremap <silent> <m-p> :ALEFindReferences<cr>

" fzf
nnoremap <silent> <m-g> :Rg<cr>
nnoremap <silent> <m-f> :Files<cr>

call comment#bind()
call pair#bind()
call search#bind()
